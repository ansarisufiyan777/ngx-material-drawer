{"version":3,"sources":["ng://ngx-material-drawer/lib/app/utils/mat-event-emitter.service.ts","ng://ngx-material-drawer/lib/app/utils/nav.service.ts","ng://ngx-material-drawer/lib/app/material-drawer/material-drawer.component.ts","ng://ngx-material-drawer/lib/app/nav-list-item/nav-list-item.component.ts","ng://ngx-material-drawer/lib/app/top-nav/top-nav.component.ts","ng://ngx-material-drawer/lib/app/menu-list-item/menu-list-item.component.ts","ng://ngx-material-drawer/lib/app/nav-list-item-mini/nav-list-item-mini.component.ts","ng://ngx-material-drawer/lib/app/material.module.ts","ng://ngx-material-drawer/lib/app/matrial-drawer.module.ts"],"names":["NgxMaterialDrawerEventEmitter","this","onMatDrawerInit","Subject","onMatDrawerAfterViewInit","onNavStateChange","onDataChange","ReplaySubject","onSideNavOpen","onSideNavClosed","onMinVarientChange","onSideNavItemClick","onSideNavItemExpanded","onSideNavItemCollapsed","onMenuItemClick","onMenuItemExpanded","onMenuItemCollapsed","onSearchValueChange","onSerachFocusIn","onSerachFocusOut","prototype","matDrawerInit","event","next","matDrawerAfterViewInit","navStateChange","searchValueChange","searchObject","serachFocusIn","serachFocusOut","dataChange","sideNavOpen","sideNavClosed","minVarientChange","sideNavItemClick","sideNavItemExpanded","sideNavItemCollapsed","menuItemClick","menuItemExpanded","menuItemCollapsed","Injectable","args","providedIn","NgxNavService","matEventEmitterService","currentUrl","BehaviorSubject","undefined","isDrawerOpened","closeNav","isMiniVarient","appDrawer","close","isOpened","getData","openNav","open","toggleNav","toggle","b","drawer","NgxMaterialDrawerComponent","navService","EventEmitter","onSerachValueChange","version","VERSION","subscribeToEventEmitter","ngOnInit","_this","navData","subscribe","res","ngAfterViewInit","emit","Component","selector","template","ViewChild","Input","Output","NgxNavListItemComponent","ariaExpanded","expanded","depth","url","item","route","indexOf","onItemSelected","children","length","onClickClose","animations","trigger","state","style","transform","transition","animate","HostBinding","NgxTopNavComponent","searchValue","flag","toggleSearchBar","isSearchActive","value","inputRef","ngxSearchBox","opacity","NgxMenuListItemComponent","menus","exportAs","NgxNavListItemMiniComponent","MaterialModule","NgModule","exports","MatButtonModule","MatIconModule","MatListModule","MatMenuModule","MatRippleModule","MatSidenavModule","MatToolbarModule","declarations","NgxMaterialDrawerModule","imports","BrowserModule","CommonModule","BrowserAnimationsModule","FlexLayoutModule","FormsModule","bootstrap","providers"],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter, ElementRef } from '@angular/core';\r\nimport { Subject, ReplaySubject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxMaterialDrawerEventEmitter {\r\n\r\n  public onMatDrawerInit = new Subject();\r\n  public onMatDrawerAfterViewInit = new Subject();\r\n  public onNavStateChange = new Subject();\r\n  public onDataChange = new ReplaySubject(1);\r\n  public onSideNavOpen = new Subject();\r\n  public onSideNavClosed = new Subject();\r\n  public onMinVarientChange = new Subject();\r\n  public onSideNavItemClick = new Subject();\r\n  public onSideNavItemExpanded = new Subject();\r\n  public onSideNavItemCollapsed = new Subject();\r\n  public onMenuItemClick = new Subject();\r\n  public onMenuItemExpanded = new Subject();\r\n  public onMenuItemCollapsed = new Subject();\r\n  public onSearchValueChange = new Subject();\r\n  public onSerachFocusIn = new Subject();\r\n  public onSerachFocusOut = new Subject();\r\n\r\n  constructor() { }\r\n  /**\r\n   * Material drawer Main component life cycle\r\n   * @param event json\r\n   */\r\n  public matDrawerInit(event) {\r\n    this.onMatDrawerInit.next(event);\r\n\r\n  }\r\n  /**\r\n   * Material drawer Main component life cycle\r\n   * @param event json\r\n   */\r\n  public matDrawerAfterViewInit(event) {\r\n    this.onMatDrawerAfterViewInit.next(event);\r\n\r\n  }\r\n  /**\r\n   * using on side nav toggle\r\n   * @param event json\r\n   */\r\n  public navStateChange(event) {\r\n    this.onNavStateChange.next(event);\r\n\r\n  }\r\n\r\n  /**\r\n   * On Search value change\r\n   * @param searchObject containing value and input search object\r\n   */\r\n  public searchValueChange(searchObject: { value: string; inputRef: ElementRef<any>; }): any {\r\n    this.onSearchValueChange.next(searchObject);\r\n  }\r\n\r\n  /**\r\n   * On Search focusin\r\n   * @param searchObject containing value and input search object\r\n   */\r\n  public serachFocusIn(searchObject: { value: string; inputRef: ElementRef<any>; }): any {\r\n    this.onSerachFocusIn.next(searchObject);\r\n  }\r\n\r\n  /**\r\n   * On Search focusout\r\n   * @param searchObject containing value and input search object\r\n   */\r\n  public serachFocusOut(searchObject: { value: string; inputRef: ElementRef<any>; }): any {\r\n    this.onSerachFocusOut.next(searchObject);\r\n  }\r\n\r\n  /**\r\n   * on data chamge\r\n   * @param event new json\r\n   */\r\n  public dataChange(event) {\r\n    this.onDataChange.next(event);\r\n\r\n  }\r\n\r\n  /**\r\n   * using on side nav open\r\n   * @param event json\r\n   */\r\n  public sideNavOpen(event) {\r\n    this.onSideNavOpen.next(event);\r\n\r\n  }\r\n\r\n  /**\r\n   * using on side nav closed\r\n   * @param event json\r\n   */\r\n  public sideNavClosed(event) {\r\n    this.onSideNavClosed.next(event);\r\n\r\n  }\r\n\r\n  /**\r\n   * Not using currently\r\n   * @param event json\r\n   */\r\n  public minVarientChange(event) {\r\n    this.onMinVarientChange.next(event);\r\n\r\n  }\r\n  /**\r\n   * using in side nav item\r\n   * @param event json\r\n   */\r\n  public sideNavItemClick(event) {\r\n    this.onSideNavItemClick.next(event);\r\n\r\n  }\r\n  /**\r\n   * using in side nav item\r\n   * @param event json\r\n   */\r\n  public sideNavItemExpanded(event) {\r\n    this.onSideNavItemExpanded.next(event);\r\n\r\n  }\r\n  /**\r\n   * using in side nav item\r\n   * @param event json\r\n   */\r\n  public sideNavItemCollapsed(event) {\r\n    this.onSideNavItemCollapsed.next(event);\r\n\r\n  }\r\n  /**\r\n   * using in toolbar menu\r\n   * @param event json\r\n   */\r\n  public menuItemClick(event) {\r\n    this.onMenuItemClick.next(event);\r\n\r\n  }\r\n  /**\r\n   * using in toolbar menu\r\n   * @param event json\r\n   */\r\n  public menuItemExpanded(event) {\r\n    this.onMenuItemExpanded.next(event);\r\n\r\n  }\r\n  /**\r\n   * using in toolbar menu\r\n   * @param event json\r\n   */\r\n  public menuItemCollapsed(event) {\r\n    this.onMenuItemCollapsed.next(event);\r\n\r\n  }\r\n}\r\n","import { EventEmitter, Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { NgxMaterialDrawerEventEmitter } from './mat-event-emitter.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxNavService {\r\n  public appDrawer: any;\r\n  public isMiniVarient: any;\r\n  public isOpened: boolean;\r\n  public currentUrl = new BehaviorSubject<string>(undefined);\r\n  public isDrawerOpened = false;\r\n  constructor(\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter,\r\n  ) {\r\n  }\r\n  public closeNav() {\r\n    if (!this.isMiniVarient) {\r\n      this.appDrawer.close();\r\n    }\r\n    this.isOpened = false;\r\n    this.matEventEmitterService.sideNavClosed(this.getData(this.isOpened));\r\n  }\r\n\r\n  public openNav() {\r\n    if (!this.isMiniVarient) {\r\n      this.appDrawer.open();\r\n    }\r\n    this.isOpened = true;\r\n    this.matEventEmitterService.sideNavOpen(this.getData(this.isOpened));\r\n  }\r\n  \r\n  public toggleNav() {\r\n    if (!this.isMiniVarient) {\r\n      this.appDrawer.toggle();\r\n    }\r\n    this.isOpened = !this.isOpened;\r\n    if(this.isOpened){\r\n      this.matEventEmitterService.sideNavOpen(this.getData(this.isOpened));\r\n    }else{\r\n      this.matEventEmitterService.sideNavClosed(this.getData(this.isOpened));\r\n    }\r\n    this.matEventEmitterService.navStateChange(this.getData(this.isOpened));\r\n  }\r\n\r\n  getData(b): object {\r\n    return {\r\n      drawer: this.appDrawer,\r\n      isOpened: b\r\n    }\r\n  }\r\n}\r\n","import { Component, ViewChild, ElementRef, AfterViewInit, EventEmitter, Input, Output, OnInit } from '@angular/core';\r\nimport { VERSION } from '@angular/material';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n@Component({\r\n  selector: 'ngx-material-drawer',\r\n  templateUrl: './material-drawer.component.html',\r\n  styleUrls: ['./material-drawer.component.scss']\r\n})\r\nexport class NgxMaterialDrawerComponent implements AfterViewInit, OnInit {\r\n  @ViewChild('appDrawer') appDrawer: ElementRef;\r\n\r\n\r\n  @Input('data') navData: any;\r\n\r\n  @Output() public onMatDrawerInit: any = new EventEmitter();\r\n  @Output() public onMatDrawerAfterViewInit: any = new EventEmitter();\r\n  @Output() public onNavStateChange: any = new EventEmitter();\r\n  @Output() public onDataChange: any = new EventEmitter();\r\n  @Output() public onSideNavOpen: any = new EventEmitter();\r\n  @Output() public onSideNavClosed: any = new EventEmitter();\r\n  @Output() public onMinVarientChange: any = new EventEmitter();\r\n  @Output() public onSideNavItemClick: any = new EventEmitter();\r\n  @Output() public onSideNavItemExpanded: any = new EventEmitter();\r\n  @Output() public onSideNavItemCollapsed: any = new EventEmitter();\r\n  @Output() public onMenuItemClick: any = new EventEmitter();\r\n  @Output() public onSerachValueChange: any = new EventEmitter();\r\n\r\n\r\n  //Material drawer version\r\n  public version = VERSION;\r\n\r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter) {\r\n    this.subscribeToEventEmitter();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.matEventEmitterService.dataChange(this.navData);\r\n    this.matEventEmitterService.onDataChange.subscribe(res => {\r\n      this.navData = res;\r\n      this.navService.isMiniVarient = this.navData['miniVarient'];\r\n      this.navService.isOpened = this.navData['opened'];\r\n    })\r\n    this.matEventEmitterService.matDrawerInit(this.navData);\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    this.navService.appDrawer = this.appDrawer;\r\n    this.matEventEmitterService.matDrawerAfterViewInit(this.navData);\r\n  }\r\n  private subscribeToEventEmitter() {\r\n    this.matEventEmitterService.onMatDrawerInit.subscribe((event) => {\r\n      this.onMatDrawerInit.emit(event);\r\n    })\r\n    this.matEventEmitterService.onMatDrawerAfterViewInit.subscribe((event) => {\r\n      this.onMatDrawerAfterViewInit.emit(event);\r\n    })\r\n    this.matEventEmitterService.onNavStateChange.subscribe((event) => {\r\n      this.onNavStateChange.emit(event);\r\n    })\r\n    this.matEventEmitterService.onDataChange.subscribe((event) => {\r\n      this.onDataChange.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavOpen.subscribe((event) => {\r\n      this.onSideNavOpen.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavClosed.subscribe((event) => {\r\n      this.onSideNavClosed.emit(event);\r\n    })\r\n    this.matEventEmitterService.onMinVarientChange.subscribe((event) => {\r\n      this.onMinVarientChange.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavItemClick.subscribe((event) => {\r\n      this.onSideNavItemClick.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavItemExpanded.subscribe((event) => {\r\n      this.onSideNavItemExpanded.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavItemCollapsed.subscribe((event) => {\r\n      this.onSideNavItemCollapsed.emit(event);\r\n    })\r\n    this.matEventEmitterService.onMenuItemClick.subscribe((event) => {\r\n      this.onMenuItemClick.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSearchValueChange.subscribe((event) => {\r\n      this.onSerachValueChange.emit(event);\r\n    })\r\n  }\r\n\r\n}\r\n","import { Component, HostBinding, Input, OnInit, AfterViewInit, Output, EventEmitter } from '@angular/core';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n@Component({\r\n  selector: 'app-nav-list-item',\r\n  templateUrl: './nav-list-item.component.html',\r\n  styleUrls: ['./nav-list-item.component.scss'],\r\n  animations: [\r\n    trigger('indicatorRotate', [\r\n      state('collapsed', style({ transform: 'rotate(0deg)' })),\r\n      state('expanded', style({ transform: 'rotate(180deg)' })),\r\n      transition('expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\r\n      ),\r\n    ])\r\n  ]\r\n})\r\nexport class NgxNavListItemComponent implements OnInit {\r\n\r\n  expanded: boolean;\r\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\r\n  @Input() item: any;\r\n  @Input() depth: number;  \r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService:NgxMaterialDrawerEventEmitter) {\r\n    if (this.depth === undefined) {\r\n      this.depth = 0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.navService.currentUrl.subscribe((url: string) => {\r\n      if (this.item.route && url) {\r\n        // console.log(`Checking '/${this.item.route}' against '${url}'`);\r\n        this.expanded = url.indexOf(`/${this.item.route}`) === 0;\r\n        this.ariaExpanded = this.expanded;\r\n        // console.log(`${this.item.route} is expanded: ${this.expanded}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      if (item.onClickClose) {\r\n        this.navService.closeNav();\r\n      }\r\n      this.matEventEmitterService.sideNavItemClick(item);\r\n    }\r\n    if (item.children && item.children.length) {\r\n      this.expanded = !this.expanded;\r\n      if (this.expanded) {\r\n        this.matEventEmitterService.sideNavItemExpanded(item);\r\n      } else {\r\n        this.matEventEmitterService.sideNavItemCollapsed(item);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\nimport { trigger, style, animate, transition } from '@angular/animations';\r\n\r\n\r\n@Component({\r\n  selector: 'app-top-nav',\r\n  templateUrl: './top-nav.component.html',\r\n  styleUrls: ['./top-nav.component.scss'],\r\n  animations: [\r\n    trigger(\r\n      'enterAnimation', [\r\n        transition(':enter', [\r\n          style({ transform: 'translateX(100%)', opacity: 0 }),\r\n          animate('500ms', style({ transform: 'translateX(0)', opacity: 1 }))\r\n        ]),\r\n        transition(':leave', [\r\n          style({ transform: 'translateX(0)', opacity: 1 }),\r\n          animate('500ms', style({ transform: 'translateX(100%)', opacity: 0 }))\r\n        ])\r\n      ]\r\n    )\r\n  ],\r\n})\r\nexport class NgxTopNavComponent implements OnInit {\r\n  @ViewChild(\"ngxSearchBox\") ngxSearchBox: ElementRef;\r\n  @Input() config: any;\r\n  constructor(public matEventEmitterService: NgxMaterialDrawerEventEmitter, public navService: NgxNavService) { }\r\n  public isDrawerOpened;\r\n  public isSearchActive: boolean;\r\n  public searchValue: string = \"hello\";\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.matEventEmitterService.onNavStateChange.subscribe((flag: any) => {\r\n      this.isDrawerOpened = flag.isOpened;\r\n    })\r\n    this.matEventEmitterService.onSideNavClosed.subscribe((flag: any) => {\r\n      this.isDrawerOpened = flag.isOpened;\r\n    })\r\n    this.matEventEmitterService.onSideNavClosed.subscribe((flag: any) => {\r\n      this.isDrawerOpened = flag.isOpened;\r\n    })\r\n  }\r\n\r\n  public onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      this.matEventEmitterService.menuItemClick(item);\r\n    }\r\n  }\r\n\r\n  public toggleSearchBar() {\r\n    this.isSearchActive = !this.isSearchActive;\r\n  }\r\n\r\n  public onSearchValueChange(event) {\r\n    let searchObject = {\r\n      value: this.searchValue,\r\n      inputRef: this.ngxSearchBox\r\n    }\r\n    this.matEventEmitterService.searchValueChange(searchObject);\r\n  }\r\n\r\n  public onSerachFocusIn(event) {\r\n    let searchObject = {\r\n      value: this.searchValue,\r\n      inputRef: this.ngxSearchBox\r\n    }\r\n    this.matEventEmitterService.serachFocusIn(searchObject);\r\n  }\r\n\r\n  public onSerachFocusOut(event) {\r\n    let searchObject = {\r\n      value: this.searchValue,\r\n      inputRef: this.ngxSearchBox\r\n    }\r\n    this.matEventEmitterService.serachFocusOut(searchObject);\r\n  }\r\n}","import { Component, HostBinding, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { MatMenu } from '@angular/material';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n@Component({\r\n  selector: 'app-menu-list-item',\r\n  templateUrl: './menu-list-item.component.html',\r\n  styleUrls: ['./menu-list-item.component.scss'],\r\n  exportAs: 'menuInMenuListItemComponent'\r\n})\r\nexport class NgxMenuListItemComponent implements OnInit {\r\n  expanded: boolean;\r\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\r\n  @ViewChild('childMenu') public childMenu;\r\n  @Input() menus: any;\r\n  @Input() depth: number;\r\n  @Input() matMenu: MatMenu;\r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter) {\r\n    if (this.depth === undefined) {\r\n      this.depth = 0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.navService.currentUrl.subscribe((url: string) => {\r\n      if (this.menus.route && url) {\r\n        // console.log(`Checking '/${this.item.route}' against '${url}'`);\r\n        this.expanded = url.indexOf(`/${this.menus.route}`) === 0;\r\n        this.ariaExpanded = this.expanded;\r\n        // console.log(`${this.item.route} is expanded: ${this.expanded}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      \r\n      this.matEventEmitterService.menuItemClick(item);\r\n    }\r\n    if (item.children && item.children.length) {\r\n      this.expanded = !this.expanded;\r\n      if (this.expanded) {\r\n        this.matEventEmitterService.menuItemExpanded(item);\r\n      } else {\r\n        this.matEventEmitterService.menuItemCollapsed(item);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, HostBinding, Input, OnInit, AfterViewInit } from '@angular/core';\r\n\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n@Component({\r\n  selector: 'app-nav-list-item-mini',\r\n  templateUrl: './nav-list-item-mini.component.html',\r\n  styleUrls: ['./nav-list-item-mini.component.scss'],\r\n  animations: [\r\n    trigger('indicatorRotate', [\r\n      state('collapsed', style({ transform: 'rotate(0deg)' })),\r\n      state('expanded', style({ transform: 'rotate(180deg)' })),\r\n      transition('expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\r\n      ),\r\n    ])\r\n  ]\r\n})\r\nexport class NgxNavListItemMiniComponent implements OnInit {\r\n  expanded: boolean;\r\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\r\n  @Input() item: any;\r\n  @Input() depth: number;\r\n\r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter) {\r\n    if (this.depth === undefined) {\r\n      this.depth = 0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.navService.currentUrl.subscribe((url: string) => {\r\n      if (this.item.route && url) {\r\n        // console.log(`Checking '/${this.item.route}' against '${url}'`);\r\n        this.expanded = url.indexOf(`/${this.item.route}`) === 0;\r\n        this.ariaExpanded = this.expanded;\r\n        // console.log(`${this.item.route} is expanded: ${this.expanded}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      \r\n      if (item.onClickClose) {\r\n        this.navService.closeNav();\r\n      }\r\n      this.matEventEmitterService.sideNavItemClick(item);\r\n    }\r\n    if (item.children && item.children.length) {\r\n      this.expanded = !this.expanded;\r\n      if (this.expanded) {\r\n        this.matEventEmitterService.sideNavItemExpanded(item);\r\n      } else {\r\n        this.matEventEmitterService.sideNavItemCollapsed(item);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatRippleModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n} from '@angular/material';\r\n\r\n/**\r\n * NgModule that includes all Material modules that are required.\r\n */\r\n@NgModule({\r\n    exports: [\r\n      MatButtonModule,\r\n      MatIconModule,\r\n      MatListModule,\r\n      MatMenuModule,\r\n      MatRippleModule,\r\n      MatSidenavModule,\r\n      MatToolbarModule,\r\n    ],\r\n    declarations: []\r\n  })\r\n  export class MaterialModule { }","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { NgxNavListItemComponent as NgxNavListItemComponent } from './nav-list-item/nav-list-item.component';\r\nimport { NgxNavService } from './utils/nav.service';\r\nimport { NgxTopNavComponent } from './top-nav/top-nav.component';\r\nimport { NgxMenuListItemComponent } from './menu-list-item/menu-list-item.component';\r\nimport { NgxMaterialDrawerComponent } from './material-drawer/material-drawer.component';\r\nimport { NgxNavListItemMiniComponent } from './nav-list-item-mini/nav-list-item-mini.component';\r\nimport { MaterialModule } from './material.module';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    CommonModule,\r\n    MaterialModule,\r\n    BrowserAnimationsModule,\r\n    FlexLayoutModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [\r\n    NgxNavListItemComponent,\r\n    NgxMenuListItemComponent,\r\n    NgxMaterialDrawerComponent,\r\n    NgxTopNavComponent,\r\n    NgxNavListItemMiniComponent\r\n  ],\r\n  bootstrap: [NgxMaterialDrawerComponent],\r\n  providers: [NgxNavService],\r\n  exports:[NgxMaterialDrawerComponent]\r\n})\r\nexport class NgxMaterialDrawerModule { }"]}