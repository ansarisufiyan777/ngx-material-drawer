{"version":3,"sources":["ng://ngx-material-drawer/lib/app/utils/mat-event-emitter.service.ts","ng://ngx-material-drawer/lib/app/utils/nav.service.ts","ng://ngx-material-drawer/lib/app/material-drawer/material-drawer.component.ts","ng://ngx-material-drawer/lib/app/nav-list-item/nav-list-item.component.ts","ng://ngx-material-drawer/lib/app/top-nav/top-nav.component.ts","ng://ngx-material-drawer/lib/app/menu-list-item/menu-list-item.component.ts","ng://ngx-material-drawer/lib/app/nav-list-item-mini/nav-list-item-mini.component.ts","ng://ngx-material-drawer/lib/app/material.module.ts","ng://ngx-material-drawer/lib/app/matrial-drawer.module.ts"],"names":["NgxMaterialDrawerEventEmitter","this","onMatDrawerInit","Subject","onMatDrawerAfterViewInit","onNavStateChange","onDataChange","ReplaySubject","onSideNavOpen","onSideNavClosed","onMinVarientChange","onSideNavItemClick","onSideNavItemExpanded","onSideNavItemCollapsed","onMenuItemClick","onMenuItemExpanded","onMenuItemCollapsed","prototype","matDrawerInit","event","next","matDrawerAfterViewInit","navStateChange","dataChange","sideNavOpen","sideNavClosed","minVarientChange","sideNavItemClick","sideNavItemExpanded","sideNavItemCollapsed","menuItemClick","menuItemExpanded","menuItemCollapsed","Injectable","args","providedIn","NgxNavService","matEventEmitterService","currentUrl","BehaviorSubject","undefined","isDrawerOpened","closeNav","isMiniVarient","appDrawer","close","isOpened","getData","openNav","open","toggleNav","toggle","b","drawer","NgxMaterialDrawerComponent","navService","EventEmitter","version","VERSION","subscribeToEventEmitter","ngOnInit","_this","navData","subscribe","res","ngAfterViewInit","emit","Component","selector","template","ViewChild","Input","Output","NgxNavListItemComponent","ariaExpanded","expanded","depth","url","item","route","indexOf","onItemSelected","children","length","onClickClose","animations","trigger","state","style","transform","transition","animate","HostBinding","NgxTopNavComponent","flag","NgxMenuListItemComponent","menus","exportAs","NgxNavListItemMiniComponent","MaterialModule","NgModule","exports","MatButtonModule","MatIconModule","MatListModule","MatMenuModule","MatRippleModule","MatSidenavModule","MatToolbarModule","declarations","NgxMaterialDrawerModule","imports","BrowserModule","CommonModule","BrowserAnimationsModule","FlexLayoutModule","bootstrap","providers"],"mappings":"qxBAAA,IAAAA,EAAA,WAsBE,SAAAA,IAdOC,KAAAC,gBAAkB,IAAIC,EAAAA,QACtBF,KAAAG,yBAA2B,IAAID,EAAAA,QAC/BF,KAAAI,iBAAmB,IAAIF,EAAAA,QACvBF,KAAAK,aAAe,IAAIC,EAAAA,cAAc,GACjCN,KAAAO,cAAgB,IAAIL,EAAAA,QACpBF,KAAAQ,gBAAkB,IAAIN,EAAAA,QACtBF,KAAAS,mBAAqB,IAAIP,EAAAA,QACzBF,KAAAU,mBAAqB,IAAIR,EAAAA,QACzBF,KAAAW,sBAAwB,IAAIT,EAAAA,QAC5BF,KAAAY,uBAAyB,IAAIV,EAAAA,QAC7BF,KAAAa,gBAAkB,IAAIX,EAAAA,QACtBF,KAAAc,mBAAqB,IAAIZ,EAAAA,QACzBF,KAAAe,oBAAsB,IAAIb,EAAAA,eAO1BH,EAAAiB,UAAAC,cAAP,SAAqBC,GACnBlB,KAAKC,gBAAgBkB,KAAKD,IAOrBnB,EAAAiB,UAAAI,uBAAP,SAA8BF,GAC5BlB,KAAKG,yBAAyBgB,KAAKD,IAO9BnB,EAAAiB,UAAAK,eAAP,SAAsBH,GACpBlB,KAAKI,iBAAiBe,KAAKD,IAQtBnB,EAAAiB,UAAAM,WAAP,SAAkBJ,GAChBlB,KAAKK,aAAac,KAAKD,IAQlBnB,EAAAiB,UAAAO,YAAP,SAAmBL,GACjBlB,KAAKO,cAAcY,KAAKD,IAQnBnB,EAAAiB,UAAAQ,cAAP,SAAqBN,GACnBlB,KAAKQ,gBAAgBW,KAAKD,IAQrBnB,EAAAiB,UAAAS,iBAAP,SAAwBP,GACtBlB,KAAKS,mBAAmBU,KAAKD,IAOxBnB,EAAAiB,UAAAU,iBAAP,SAAwBR,GACtBlB,KAAKU,mBAAmBS,KAAKD,IAOxBnB,EAAAiB,UAAAW,oBAAP,SAA2BT,GACzBlB,KAAKW,sBAAsBQ,KAAKD,IAO3BnB,EAAAiB,UAAAY,qBAAP,SAA4BV,GAC1BlB,KAAKY,uBAAuBO,KAAKD,IAO5BnB,EAAAiB,UAAAa,cAAP,SAAqBX,GACnBlB,KAAKa,gBAAgBM,KAAKD,IAOrBnB,EAAAiB,UAAAc,iBAAP,SAAwBZ,GACtBlB,KAAKc,mBAAmBK,KAAKD,IAOxBnB,EAAAiB,UAAAe,kBAAP,SAAyBb,GACvBlB,KAAKe,oBAAoBI,KAAKD,wBA7HjCc,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,sJAJd,GCAAC,EAAA,WAYE,SAAAA,EACSC,GAAApC,KAAAoC,uBAAAA,EAHFpC,KAAAqC,WAAa,IAAIC,EAAAA,gBAAwBC,WACzCvC,KAAAwC,gBAAiB,SAKjBL,EAAAnB,UAAAyB,SAAP,WACOzC,KAAK0C,eACR1C,KAAK2C,UAAUC,QAEjB5C,KAAK6C,UAAW,EAChB7C,KAAKoC,uBAAuBZ,cAAcxB,KAAK8C,QAAQ9C,KAAK6C,YAGvDV,EAAAnB,UAAA+B,QAAP,WACO/C,KAAK0C,eACR1C,KAAK2C,UAAUK,OAEjBhD,KAAK6C,UAAW,EAChB7C,KAAKoC,uBAAuBb,YAAYvB,KAAK8C,QAAQ9C,KAAK6C,YAGrDV,EAAAnB,UAAAiC,UAAP,WACOjD,KAAK0C,eACR1C,KAAK2C,UAAUO,SAEjBlD,KAAK6C,UAAY7C,KAAK6C,SACnB7C,KAAK6C,SACN7C,KAAKoC,uBAAuBb,YAAYvB,KAAK8C,QAAQ9C,KAAK6C,WAE1D7C,KAAKoC,uBAAuBZ,cAAcxB,KAAK8C,QAAQ9C,KAAK6C,WAE9D7C,KAAKoC,uBAAuBf,eAAerB,KAAK8C,QAAQ9C,KAAK6C,YAG/DV,EAAAnB,UAAA8B,QAAA,SAAQK,GACN,MAAO,CACLC,OAAQpD,KAAK2C,UACbE,SAAUM,wBA7CfnB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAFLnC,uHAFT,GCAAsD,EAAA,WA+BE,SAAAA,EAAmBC,EACVlB,GADUpC,KAAAsD,WAAAA,EACVtD,KAAAoC,uBAAAA,EAjBQpC,KAAAC,gBAAuB,IAAIsD,EAAAA,aAC3BvD,KAAAG,yBAAgC,IAAIoD,EAAAA,aACpCvD,KAAAI,iBAAwB,IAAImD,EAAAA,aAC5BvD,KAAAK,aAAoB,IAAIkD,EAAAA,aACxBvD,KAAAO,cAAqB,IAAIgD,EAAAA,aACzBvD,KAAAQ,gBAAuB,IAAI+C,EAAAA,aAC3BvD,KAAAS,mBAA0B,IAAI8C,EAAAA,aAC9BvD,KAAAU,mBAA0B,IAAI6C,EAAAA,aAC9BvD,KAAAW,sBAA6B,IAAI4C,EAAAA,aACjCvD,KAAAY,uBAA8B,IAAI2C,EAAAA,aAClCvD,KAAAa,gBAAuB,IAAI0C,EAAAA,aAIrCvD,KAAAwD,QAAUC,EAAAA,QAIfzD,KAAK0D,0BAqDT,OAlDSL,EAAArC,UAAA2C,SAAP,WAAA,IAAAC,EAAA5D,KACEA,KAAKoC,uBAAuBd,WAAWtB,KAAK6D,SAC5C7D,KAAKoC,uBAAuB/B,aAAayD,UAAS,SAACC,GACjDH,EAAKC,QAAUE,EACfH,EAAKN,WAAWZ,cAAgBkB,EAAKC,QAAqB,YAC1DD,EAAKN,WAAWT,SAAWe,EAAKC,QAAgB,SAElD7D,KAAKoC,uBAAuBnB,cAAcjB,KAAK6D,UAG1CR,EAAArC,UAAAgD,gBAAP,WACEhE,KAAKsD,WAAWX,UAAY3C,KAAK2C,UACjC3C,KAAKoC,uBAAuBhB,uBAAuBpB,KAAK6D,UAElDR,EAAArC,UAAA0C,wBAAR,WAAA,IAAAE,EAAA5D,KACEA,KAAKoC,uBAAuBnC,gBAAgB6D,UAAS,SAAE5C,GACrD0C,EAAK3D,gBAAgBgE,KAAK/C,KAE5BlB,KAAKoC,uBAAuBjC,yBAAyB2D,UAAS,SAAE5C,GAC9D0C,EAAKzD,yBAAyB8D,KAAK/C,KAErClB,KAAKoC,uBAAuBhC,iBAAiB0D,UAAS,SAAE5C,GACtD0C,EAAKxD,iBAAiB6D,KAAK/C,KAE7BlB,KAAKoC,uBAAuB/B,aAAayD,UAAS,SAAE5C,GAClD0C,EAAKvD,aAAa4D,KAAK/C,KAEzBlB,KAAKoC,uBAAuB7B,cAAcuD,UAAS,SAAE5C,GACnD0C,EAAKrD,cAAc0D,KAAK/C,KAE1BlB,KAAKoC,uBAAuB5B,gBAAgBsD,UAAS,SAAE5C,GACrD0C,EAAKpD,gBAAgByD,KAAK/C,KAE5BlB,KAAKoC,uBAAuB3B,mBAAmBqD,UAAS,SAAE5C,GACxD0C,EAAKnD,mBAAmBwD,KAAK/C,KAE/BlB,KAAKoC,uBAAuB1B,mBAAmBoD,UAAS,SAAE5C,GACxD0C,EAAKlD,mBAAmBuD,KAAK/C,KAE/BlB,KAAKoC,uBAAuBzB,sBAAsBmD,UAAS,SAAE5C,GAC3D0C,EAAKjD,sBAAsBsD,KAAK/C,KAElClB,KAAKoC,uBAAuBxB,uBAAuBkD,UAAS,SAAE5C,GAC5D0C,EAAKhD,uBAAuBqD,KAAK/C,KAEnClB,KAAKoC,uBAAuBvB,gBAAgBiD,UAAS,SAAE5C,GACrD0C,EAAK/C,gBAAgBoD,KAAK/C,0BA9E/BgD,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,sBACVC,SAAA,m79DAJOjC,SACApC,wCAONsE,EAAAA,UAASpC,KAAA,CAAC,8BAGVqC,EAAAA,MAAKrC,KAAA,CAAC,iCAENsC,EAAAA,yCACAA,EAAAA,iCACAA,EAAAA,6BACAA,EAAAA,8BACAA,EAAAA,gCACAA,EAAAA,mCACAA,EAAAA,mCACAA,EAAAA,sCACAA,EAAAA,uCACAA,EAAAA,gCACAA,EAAAA,UA6DHlB,EAtFA,GCAAmB,EAAA,WAyBE,SAAAA,EAAmBlB,EACVlB,GADUpC,KAAAsD,WAAAA,EACVtD,KAAAoC,uBAAAA,EAJ0BpC,KAAAyE,aAAezE,KAAK0E,SAKjD1E,KAAK2E,QAAUpC,YACjBvC,KAAK2E,MAAQ,GA+BnB,OA3BEH,EAAAxD,UAAA2C,SAAA,WAAA,IAAAC,EAAA5D,KACEA,KAAKsD,WAAWjB,WAAWyB,UAAS,SAAEc,GAChChB,EAAKiB,KAAKC,OAASF,IAErBhB,EAAKc,SAAkD,IAAvCE,EAAIG,QAAQ,IAAInB,EAAKiB,KAAKC,OAC1ClB,EAAKa,aAAeb,EAAKc,aAM/BF,EAAAxD,UAAAgE,eAAA,SAAeH,GACRA,EAAKI,UAAaJ,EAAKI,SAASC,SAC/BL,EAAKM,cACPnF,KAAKsD,WAAWb,WAElBzC,KAAKoC,uBAAuBV,iBAAiBmD,IAE3CA,EAAKI,UAAYJ,EAAKI,SAASC,SACjClF,KAAK0E,UAAY1E,KAAK0E,SAClB1E,KAAK0E,SACP1E,KAAKoC,uBAAuBT,oBAAoBkD,GAEhD7E,KAAKoC,uBAAuBR,qBAAqBiD,yBAlDxDX,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,oBACVC,SAAA,8vBAEAgB,WAAY,CACVC,EAAAA,QAAQ,kBAAmB,CACzBC,EAAAA,MAAM,YAAaC,EAAAA,MAAM,CAAEC,UAAW,kBACtCF,EAAAA,MAAM,WAAYC,EAAAA,MAAM,CAAEC,UAAW,oBACrCC,EAAAA,WAAW,yBACTC,EAAAA,QAAQ,us6DAbPvD,SAEApC,2CAmBN4F,EAAAA,YAAW1D,KAAA,CAAC,oCACZqC,EAAAA,qBACAA,EAAAA,SAmCHE,EA3DA,GCAAoB,EAAA,WAYE,SAAAA,EAAmBxD,EAA6DkB,GAA7DtD,KAAAoC,uBAAAA,EAA6DpC,KAAAsD,WAAAA,EAyBlF,OAvBEsC,EAAA5E,UAAA2C,SAAA,aAEAiC,EAAA5E,UAAAgD,gBAAA,WAAA,IAAAJ,EAAA5D,KACEA,KAAKoC,uBAAuBhC,iBAAiB0D,UAAS,SAAE+B,GACtDjC,EAAKpB,eAAiBqD,EAAKhD,WAE7B7C,KAAKoC,uBAAuB5B,gBAAgBsD,UAAS,SAAE+B,GACrDjC,EAAKpB,eAAiBqD,EAAKhD,WAE7B7C,KAAKoC,uBAAuB5B,gBAAgBsD,UAAS,SAAE+B,GACrDjC,EAAKpB,eAAiBqD,EAAKhD,YAG/B+C,EAAA5E,UAAAgE,eAAA,SAAeH,GACRA,EAAKI,UAAaJ,EAAKI,SAASC,SAE/BL,EAAKM,cACPnF,KAAKsD,WAAWb,WAElBzC,KAAKoC,uBAAuBV,iBAAiBmD,yBA5BlDX,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,cACVC,SAAA,mvIALOrE,SADAoC,qCAUNmC,EAAAA,SA0BHsB,EArCA,GCAAE,EAAA,WAmBE,SAAAA,EAAmBxC,EACVlB,GADUpC,KAAAsD,WAAAA,EACVtD,KAAAoC,uBAAAA,EAN0BpC,KAAAyE,aAAezE,KAAK0E,SAOjD1E,KAAK2E,QAAUpC,YACjBvC,KAAK2E,MAAQ,GA6BnB,OAzBEmB,EAAA9E,UAAA2C,SAAA,WAAA,IAAAC,EAAA5D,KACEA,KAAKsD,WAAWjB,WAAWyB,UAAS,SAAEc,GAChChB,EAAKmC,MAAMjB,OAASF,IAEtBhB,EAAKc,SAAmD,IAAxCE,EAAIG,QAAQ,IAAInB,EAAKmC,MAAMjB,OAC3ClB,EAAKa,aAAeb,EAAKc,aAM/BoB,EAAA9E,UAAAgE,eAAA,SAAeH,GACRA,EAAKI,UAAaJ,EAAKI,SAASC,QAEnClF,KAAKoC,uBAAuBP,cAAcgD,GAExCA,EAAKI,UAAYJ,EAAKI,SAASC,SACjClF,KAAK0E,UAAY1E,KAAK0E,SAClB1E,KAAK0E,SACP1E,KAAKoC,uBAAuBN,iBAAiB+C,GAE7C7E,KAAKoC,uBAAuBL,kBAAkB8C,yBAzCrDX,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,qBACVC,SAAA,oyCAEA4B,SAAU,0t6DATH7D,SAGApC,2CAUN4F,EAAAA,YAAW1D,KAAA,CAAC,yCACZoC,EAAAA,UAASpC,KAAA,CAAC,4BACVqC,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,SAiCHwB,EAnDA,GCAAG,EAAA,WA0BE,SAAAA,EAAmB3C,EACVlB,GADUpC,KAAAsD,WAAAA,EACVtD,KAAAoC,uBAAAA,EAL0BpC,KAAAyE,aAAezE,KAAK0E,SAMjD1E,KAAK2E,QAAUpC,YACjBvC,KAAK2E,MAAQ,GAgCnB,OA5BEsB,EAAAjF,UAAA2C,SAAA,WAAA,IAAAC,EAAA5D,KACEA,KAAKsD,WAAWjB,WAAWyB,UAAS,SAAEc,GAChChB,EAAKiB,KAAKC,OAASF,IAErBhB,EAAKc,SAAkD,IAAvCE,EAAIG,QAAQ,IAAInB,EAAKiB,KAAKC,OAC1ClB,EAAKa,aAAeb,EAAKc,aAM/BuB,EAAAjF,UAAAgE,eAAA,SAAeH,GACRA,EAAKI,UAAaJ,EAAKI,SAASC,SAE/BL,EAAKM,cACPnF,KAAKsD,WAAWb,WAElBzC,KAAKoC,uBAAuBV,iBAAiBmD,IAE3CA,EAAKI,UAAYJ,EAAKI,SAASC,SACjClF,KAAK0E,UAAY1E,KAAK0E,SAClB1E,KAAK0E,SACP1E,KAAKoC,uBAAuBT,oBAAoBkD,GAEhD7E,KAAKoC,uBAAuBR,qBAAqBiD,yBAnDxDX,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,yBACVC,SAAA,ycAEAgB,WAAY,CACVC,EAAAA,QAAQ,kBAAmB,CACzBC,EAAAA,MAAM,YAAaC,EAAAA,MAAM,CAAEC,UAAW,kBACtCF,EAAAA,MAAM,WAAYC,EAAAA,MAAM,CAAEC,UAAW,oBACrCC,EAAAA,WAAW,yBACTC,EAAAA,QAAQ,us6DAbPvD,SAEApC,2CAkBN4F,EAAAA,YAAW1D,KAAA,CAAC,oCACZqC,EAAAA,qBACAA,EAAAA,SAqCH2B,EA7DA,GCcAC,EAAA,WAAA,SAAAA,KAYgC,2BAZ/BC,EAAAA,SAAQlE,KAAA,CAAC,CACNmE,QAAS,CACPC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,iBACAC,EAAAA,kBAEFC,aAAc,OAEcV,EAZhC,GCdAW,EAAA,WAcA,SAAAA,KAmBuC,2BAnBtCV,EAAAA,SAAQlE,KAAA,CAAC,CACR6E,QAAS,CACPC,EAAAA,cACAC,EAAAA,aACAd,EACAe,EAAAA,wBACAC,EAAAA,kBAEFN,aAAc,CACZpC,EACAsB,EACAzC,EACAuC,EACAK,GAEFkB,UAAW,CAAC9D,GACZ+D,UAAW,CAACjF,GACZiE,QAAQ,CAAC/C,OAE4BwD,EAjCvC","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { Subject, ReplaySubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMaterialDrawerEventEmitter {\n\n  public onMatDrawerInit = new Subject();\n  public onMatDrawerAfterViewInit = new Subject();\n  public onNavStateChange = new Subject();\n  public onDataChange = new ReplaySubject(1);\n  public onSideNavOpen = new Subject();\n  public onSideNavClosed = new Subject();\n  public onMinVarientChange = new Subject();\n  public onSideNavItemClick = new Subject();\n  public onSideNavItemExpanded = new Subject();\n  public onSideNavItemCollapsed = new Subject();\n  public onMenuItemClick = new Subject();\n  public onMenuItemExpanded = new Subject();\n  public onMenuItemCollapsed = new Subject();\n\n  constructor() { }\n  /**\n   * Material drawer Main component life cycle\n   * @param event json\n   */\n  public matDrawerInit(event){\n    this.onMatDrawerInit.next(event);\n  \n  }\n  /**\n   * Material drawer Main component life cycle\n   * @param event json\n   */\n  public matDrawerAfterViewInit(event){\n    this.onMatDrawerAfterViewInit.next(event);\n  \n  }\n  /**\n   * using on side nav toggle\n   * @param event json\n   */\n  public navStateChange(event){\n    this.onNavStateChange.next(event);\n    \n  }\n\n  /**\n   * on data chamge\n   * @param event new json\n   */\n  public dataChange(event){\n    this.onDataChange.next(event);\n    \n  }\n\n  /**\n   * using on side nav open\n   * @param event json\n   */\n  public sideNavOpen(event){\n    this.onSideNavOpen.next(event);\n    \n  }\n\n  /**\n   * using on side nav closed\n   * @param event json\n   */\n  public sideNavClosed(event){\n    this.onSideNavClosed.next(event);\n    \n  }\n\n  /**\n   * Not using currently\n   * @param event json\n   */\n  public minVarientChange(event){\n    this.onMinVarientChange.next(event);\n    \n  }\n  /**\n   * using in side nav item\n   * @param event json\n   */\n  public sideNavItemClick(event){\n    this.onSideNavItemClick.next(event);\n    \n  }\n  /**\n   * using in side nav item\n   * @param event json\n   */\n  public sideNavItemExpanded(event){\n    this.onSideNavItemExpanded.next(event);\n    \n  }\n  /**\n   * using in side nav item\n   * @param event json\n   */\n  public sideNavItemCollapsed(event){\n    this.onSideNavItemCollapsed.next(event);\n    \n  }\n  /**\n   * using in toolbar menu\n   * @param event json\n   */\n  public menuItemClick(event){\n    this.onMenuItemClick.next(event);\n    \n  }\n  /**\n   * using in toolbar menu\n   * @param event json\n   */\n  public menuItemExpanded(event){\n    this.onMenuItemExpanded.next(event);\n    \n  }\n  /**\n   * using in toolbar menu\n   * @param event json\n   */\n  public menuItemCollapsed(event){\n    this.onMenuItemCollapsed.next(event);\n    \n  }\n}\n","import { EventEmitter, Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { NgxMaterialDrawerEventEmitter } from './mat-event-emitter.service';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxNavService {\r\n  public appDrawer: any;\r\n  public isMiniVarient: any;\r\n  public isOpened: boolean;\r\n  public currentUrl = new BehaviorSubject<string>(undefined);\r\n  public isDrawerOpened = false;\r\n  constructor(\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter,\r\n  ) {\r\n  }\r\n  public closeNav() {\r\n    if (!this.isMiniVarient) {\r\n      this.appDrawer.close();\r\n    }\r\n    this.isOpened = false;\r\n    this.matEventEmitterService.sideNavClosed(this.getData(this.isOpened));\r\n  }\r\n\r\n  public openNav() {\r\n    if (!this.isMiniVarient) {\r\n      this.appDrawer.open();\r\n    }\r\n    this.isOpened = true;\r\n    this.matEventEmitterService.sideNavOpen(this.getData(this.isOpened));\r\n  }\r\n  \r\n  public toggleNav() {\r\n    if (!this.isMiniVarient) {\r\n      this.appDrawer.toggle();\r\n    }\r\n    this.isOpened = !this.isOpened;\r\n    if(this.isOpened){\r\n      this.matEventEmitterService.sideNavOpen(this.getData(this.isOpened));\r\n    }else{\r\n      this.matEventEmitterService.sideNavClosed(this.getData(this.isOpened));\r\n    }\r\n    this.matEventEmitterService.navStateChange(this.getData(this.isOpened));\r\n  }\r\n\r\n  getData(b): object {\r\n    return {\r\n      drawer: this.appDrawer,\r\n      isOpened: b\r\n    }\r\n  }\r\n}\r\n","import { Component, ViewChild, ElementRef, AfterViewInit, EventEmitter, Input, Output, OnInit } from '@angular/core';\r\nimport { VERSION } from '@angular/material';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n@Component({\r\n  selector: 'ngx-material-drawer',\r\n  templateUrl: './material-drawer.component.html',\r\n  styleUrls: ['./material-drawer.component.scss']\r\n})\r\nexport class NgxMaterialDrawerComponent implements AfterViewInit, OnInit {\r\n  @ViewChild('appDrawer') appDrawer: ElementRef;\r\n\r\n\r\n  @Input('data') navData: any;\r\n\r\n  @Output() public onMatDrawerInit: any = new EventEmitter();\r\n  @Output() public onMatDrawerAfterViewInit: any = new EventEmitter();\r\n  @Output() public onNavStateChange: any = new EventEmitter();\r\n  @Output() public onDataChange: any = new EventEmitter();\r\n  @Output() public onSideNavOpen: any = new EventEmitter();\r\n  @Output() public onSideNavClosed: any = new EventEmitter();\r\n  @Output() public onMinVarientChange: any = new EventEmitter();\r\n  @Output() public onSideNavItemClick: any = new EventEmitter();\r\n  @Output() public onSideNavItemExpanded: any = new EventEmitter();\r\n  @Output() public onSideNavItemCollapsed: any = new EventEmitter();\r\n  @Output() public onMenuItemClick: any = new EventEmitter();\r\n\r\n\r\n  //Material drawer version\r\n  public version = VERSION;\r\n\r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter) {\r\n    this.subscribeToEventEmitter();\r\n  }\r\n\r\n  public ngOnInit() {\r\n    this.matEventEmitterService.dataChange(this.navData);\r\n    this.matEventEmitterService.onDataChange.subscribe(res => {\r\n      this.navData = res;\r\n      this.navService.isMiniVarient = this.navData['miniVarient'];\r\n      this.navService.isOpened = this.navData['opened'];\r\n    })\r\n    this.matEventEmitterService.matDrawerInit(this.navData);\r\n  }\r\n\r\n  public ngAfterViewInit() {\r\n    this.navService.appDrawer = this.appDrawer;\r\n    this.matEventEmitterService.matDrawerAfterViewInit(this.navData);\r\n  }\r\n  private subscribeToEventEmitter() {\r\n    this.matEventEmitterService.onMatDrawerInit.subscribe((event) => {\r\n      this.onMatDrawerInit.emit(event);\r\n    })\r\n    this.matEventEmitterService.onMatDrawerAfterViewInit.subscribe((event) => {\r\n      this.onMatDrawerAfterViewInit.emit(event);\r\n    })\r\n    this.matEventEmitterService.onNavStateChange.subscribe((event) => {\r\n      this.onNavStateChange.emit(event);\r\n    })\r\n    this.matEventEmitterService.onDataChange.subscribe((event) => {\r\n      this.onDataChange.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavOpen.subscribe((event) => {\r\n      this.onSideNavOpen.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavClosed.subscribe((event) => {\r\n      this.onSideNavClosed.emit(event);\r\n    })\r\n    this.matEventEmitterService.onMinVarientChange.subscribe((event) => {\r\n      this.onMinVarientChange.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavItemClick.subscribe((event) => {\r\n      this.onSideNavItemClick.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavItemExpanded.subscribe((event) => {\r\n      this.onSideNavItemExpanded.emit(event);\r\n    })\r\n    this.matEventEmitterService.onSideNavItemCollapsed.subscribe((event) => {\r\n      this.onSideNavItemCollapsed.emit(event);\r\n    })\r\n    this.matEventEmitterService.onMenuItemClick.subscribe((event) => {\r\n      this.onMenuItemClick.emit(event);\r\n    })\r\n  }\r\n\r\n}\r\n","import { Component, HostBinding, Input, OnInit, AfterViewInit, Output, EventEmitter } from '@angular/core';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n@Component({\r\n  selector: 'app-nav-list-item',\r\n  templateUrl: './nav-list-item.component.html',\r\n  styleUrls: ['./nav-list-item.component.scss'],\r\n  animations: [\r\n    trigger('indicatorRotate', [\r\n      state('collapsed', style({ transform: 'rotate(0deg)' })),\r\n      state('expanded', style({ transform: 'rotate(180deg)' })),\r\n      transition('expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\r\n      ),\r\n    ])\r\n  ]\r\n})\r\nexport class NgxNavListItemComponent implements OnInit {\r\n\r\n  expanded: boolean;\r\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\r\n  @Input() item: any;\r\n  @Input() depth: number;  \r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService:NgxMaterialDrawerEventEmitter) {\r\n    if (this.depth === undefined) {\r\n      this.depth = 0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.navService.currentUrl.subscribe((url: string) => {\r\n      if (this.item.route && url) {\r\n        // console.log(`Checking '/${this.item.route}' against '${url}'`);\r\n        this.expanded = url.indexOf(`/${this.item.route}`) === 0;\r\n        this.ariaExpanded = this.expanded;\r\n        // console.log(`${this.item.route} is expanded: ${this.expanded}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      if (item.onClickClose) {\r\n        this.navService.closeNav();\r\n      }\r\n      this.matEventEmitterService.sideNavItemClick(item);\r\n    }\r\n    if (item.children && item.children.length) {\r\n      this.expanded = !this.expanded;\r\n      if (this.expanded) {\r\n        this.matEventEmitterService.sideNavItemExpanded(item);\r\n      } else {\r\n        this.matEventEmitterService.sideNavItemCollapsed(item);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-top-nav',\r\n  templateUrl: './top-nav.component.html',\r\n  styleUrls: ['./top-nav.component.scss']\r\n})\r\nexport class NgxTopNavComponent implements OnInit {\r\n  @Input() config: any;\r\n  constructor(public matEventEmitterService: NgxMaterialDrawerEventEmitter,public navService:NgxNavService) { }\r\n  public isDrawerOpened;\r\n  ngOnInit() {\r\n  }\r\n  ngAfterViewInit() {\r\n    this.matEventEmitterService.onNavStateChange.subscribe((flag:any) => {\r\n      this.isDrawerOpened = flag.isOpened;\r\n    })\r\n    this.matEventEmitterService.onSideNavClosed.subscribe((flag:any) => {\r\n      this.isDrawerOpened = flag.isOpened;\r\n    })\r\n    this.matEventEmitterService.onSideNavClosed.subscribe((flag:any) => {\r\n      this.isDrawerOpened = flag.isOpened;\r\n    })\r\n  }\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      \r\n      if (item.onClickClose) {\r\n        this.navService.closeNav();\r\n      }\r\n      this.matEventEmitterService.sideNavItemClick(item);\r\n    }\r\n  }\r\n\r\n}","import { Component, HostBinding, Input, OnInit, ViewChild } from '@angular/core';\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { MatMenu } from '@angular/material';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n@Component({\r\n  selector: 'app-menu-list-item',\r\n  templateUrl: './menu-list-item.component.html',\r\n  styleUrls: ['./menu-list-item.component.scss'],\r\n  exportAs: 'menuInMenuListItemComponent'\r\n})\r\nexport class NgxMenuListItemComponent implements OnInit {\r\n  expanded: boolean;\r\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\r\n  @ViewChild('childMenu') public childMenu;\r\n  @Input() menus: any;\r\n  @Input() depth: number;\r\n  @Input() matMenu: MatMenu;\r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter) {\r\n    if (this.depth === undefined) {\r\n      this.depth = 0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.navService.currentUrl.subscribe((url: string) => {\r\n      if (this.menus.route && url) {\r\n        // console.log(`Checking '/${this.item.route}' against '${url}'`);\r\n        this.expanded = url.indexOf(`/${this.menus.route}`) === 0;\r\n        this.ariaExpanded = this.expanded;\r\n        // console.log(`${this.item.route} is expanded: ${this.expanded}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      \r\n      this.matEventEmitterService.menuItemClick(item);\r\n    }\r\n    if (item.children && item.children.length) {\r\n      this.expanded = !this.expanded;\r\n      if (this.expanded) {\r\n        this.matEventEmitterService.menuItemExpanded(item);\r\n      } else {\r\n        this.matEventEmitterService.menuItemCollapsed(item);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, HostBinding, Input, OnInit, AfterViewInit } from '@angular/core';\r\n\r\nimport { NgxNavService } from '../utils/nav.service';\r\nimport { animate, state, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\r\n\r\n@Component({\r\n  selector: 'app-nav-list-item-mini',\r\n  templateUrl: './nav-list-item-mini.component.html',\r\n  styleUrls: ['./nav-list-item-mini.component.scss'],\r\n  animations: [\r\n    trigger('indicatorRotate', [\r\n      state('collapsed', style({ transform: 'rotate(0deg)' })),\r\n      state('expanded', style({ transform: 'rotate(180deg)' })),\r\n      transition('expanded <=> collapsed',\r\n        animate('225ms cubic-bezier(0.4,0.0,0.2,1)')\r\n      ),\r\n    ])\r\n  ]\r\n})\r\nexport class NgxNavListItemMiniComponent implements OnInit {\r\n  expanded: boolean;\r\n  @HostBinding('attr.aria-expanded') ariaExpanded = this.expanded;\r\n  @Input() item: any;\r\n  @Input() depth: number;\r\n\r\n  constructor(public navService: NgxNavService,\r\n    public matEventEmitterService: NgxMaterialDrawerEventEmitter) {\r\n    if (this.depth === undefined) {\r\n      this.depth = 0;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.navService.currentUrl.subscribe((url: string) => {\r\n      if (this.item.route && url) {\r\n        // console.log(`Checking '/${this.item.route}' against '${url}'`);\r\n        this.expanded = url.indexOf(`/${this.item.route}`) === 0;\r\n        this.ariaExpanded = this.expanded;\r\n        // console.log(`${this.item.route} is expanded: ${this.expanded}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  onItemSelected(item: any) {\r\n    if (!item.children || !item.children.length) {\r\n      \r\n      if (item.onClickClose) {\r\n        this.navService.closeNav();\r\n      }\r\n      this.matEventEmitterService.sideNavItemClick(item);\r\n    }\r\n    if (item.children && item.children.length) {\r\n      this.expanded = !this.expanded;\r\n      if (this.expanded) {\r\n        this.matEventEmitterService.sideNavItemExpanded(item);\r\n      } else {\r\n        this.matEventEmitterService.sideNavItemCollapsed(item);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport {\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatRippleModule,\r\n  MatSidenavModule,\r\n  MatToolbarModule,\r\n} from '@angular/material';\r\n\r\n/**\r\n * NgModule that includes all Material modules that are required.\r\n */\r\n@NgModule({\r\n    exports: [\r\n      MatButtonModule,\r\n      MatIconModule,\r\n      MatListModule,\r\n      MatMenuModule,\r\n      MatRippleModule,\r\n      MatSidenavModule,\r\n      MatToolbarModule,\r\n    ],\r\n    declarations: []\r\n  })\r\n  export class MaterialModule { }","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { NgxNavListItemComponent as NgxNavListItemComponent } from './nav-list-item/nav-list-item.component';\r\nimport { NgxNavService } from './utils/nav.service';\r\nimport { NgxTopNavComponent } from './top-nav/top-nav.component';\r\nimport { NgxMenuListItemComponent } from './menu-list-item/menu-list-item.component';\r\nimport { NgxMaterialDrawerComponent } from './material-drawer/material-drawer.component';\r\nimport { NgxNavListItemMiniComponent } from './nav-list-item-mini/nav-list-item-mini.component';\r\nimport { MaterialModule } from './material.module';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    CommonModule,\r\n    MaterialModule,\r\n    BrowserAnimationsModule,\r\n    FlexLayoutModule\r\n  ],\r\n  declarations: [\r\n    NgxNavListItemComponent,\r\n    NgxMenuListItemComponent,\r\n    NgxMaterialDrawerComponent,\r\n    NgxTopNavComponent,\r\n    NgxNavListItemMiniComponent\r\n  ],\r\n  bootstrap: [NgxMaterialDrawerComponent],\r\n  providers: [NgxNavService],\r\n  exports:[NgxMaterialDrawerComponent]\r\n})\r\nexport class NgxMaterialDrawerModule { }"]}