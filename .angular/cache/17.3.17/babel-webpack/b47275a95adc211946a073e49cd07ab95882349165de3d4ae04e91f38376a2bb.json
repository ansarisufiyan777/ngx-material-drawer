{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { Subject, ReplaySubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let NgxMaterialDrawerEventEmitter = /*#__PURE__*/(() => {\n  class NgxMaterialDrawerEventEmitter {\n    constructor() {\n      this.onMatDrawerInit = new Subject();\n      this.onMatDrawerAfterViewInit = new Subject();\n      this.onNavStateChange = new Subject();\n      this.onDataChange = new ReplaySubject(1);\n      this.onGridDataChange = new ReplaySubject(1);\n      this.onSideNavOpen = new Subject();\n      this.onSideNavClosed = new Subject();\n      this.onMinVarientChange = new Subject();\n      this.onSideNavItemClick = new Subject();\n      this.onSideNavItemExpanded = new Subject();\n      this.onSideNavItemCollapsed = new Subject();\n      this.onMenuItemClick = new Subject();\n      this.onMenuItemExpanded = new Subject();\n      this.onMenuItemCollapsed = new Subject();\n      this.onSearchValueChange = new Subject();\n      this.onSerachFocusIn = new Subject();\n      this.onSerachFocusOut = new Subject();\n      this.onSerachInputOpen = new Subject();\n      this.onSerachInputClosed = new Subject();\n      this.onFabExpanded = new Subject();\n      this.onFabCollapsed = new Subject();\n      this.onMainFabButtonClick = new Subject();\n      this.onFabButtonClick = new Subject();\n    }\n    /**\n     * Material drawer Main component life cycle\n     * @param event json\n     */\n    matDrawerInit(event) {\n      this.onMatDrawerInit.next(event);\n    }\n    /**\n     * Material drawer Main component life cycle\n     * @param event json\n     */\n    matDrawerAfterViewInit(event) {\n      this.onMatDrawerAfterViewInit.next(event);\n    }\n    /**\n     * using on side nav toggle\n     * @param event json\n     */\n    navStateChange(event) {\n      this.onNavStateChange.next(event);\n    }\n    /**\n     * On Search value change\n     * @param searchObject containing value and input search object\n     */\n    searchValueChange(searchObject) {\n      this.onSearchValueChange.next(searchObject);\n    }\n    /**\n     * On Search focusin\n     * @param searchObject containing value and input search object\n     */\n    serachFocusIn(searchObject) {\n      this.onSerachFocusIn.next(searchObject);\n    }\n    /**\n     * On Search focusout\n     * @param searchObject containing value and input search object\n     */\n    serachFocusOut(searchObject) {\n      this.onSerachFocusOut.next(searchObject);\n    }\n    /**\n     * On Search focusout\n     * @param searchObject containing value and input search object\n     */\n    serachInputOpen(searchObject) {\n      this.onSerachInputOpen.next(searchObject);\n    }\n    /**\n     * On Search focusout\n     * @param searchObject containing value and input search object\n     */\n    serachInputClosed(searchObject) {\n      this.onSerachInputClosed.next(searchObject);\n    }\n    /**\n     * on data chamge\n     * @param event new json\n     */\n    dataChange(event) {\n      this.onDataChange.next(event);\n    }\n    /**\n     * on data chamge\n     * @param event new json\n     */\n    gridDataChange(event) {\n      this.onGridDataChange.next(event);\n    }\n    /**\n     * using on side nav open\n     * @param event json\n     */\n    sideNavOpen(event) {\n      this.onSideNavOpen.next(event);\n    }\n    /**\n     * using on side nav closed\n     * @param event json\n     */\n    sideNavClosed(event) {\n      this.onSideNavClosed.next(event);\n    }\n    /**\n     * Not using currently\n     * @param event json\n     */\n    minVarientChange(event) {\n      this.onMinVarientChange.next(event);\n    }\n    /**\n     * using in side nav item\n     * @param event json\n     */\n    sideNavItemClick(event) {\n      this.onSideNavItemClick.next(event);\n    }\n    /**\n     * using in side nav item\n     * @param event json\n     */\n    sideNavItemExpanded(event) {\n      this.onSideNavItemExpanded.next(event);\n    }\n    /**\n     * using in side nav item\n     * @param event json\n     */\n    sideNavItemCollapsed(event) {\n      this.onSideNavItemCollapsed.next(event);\n    }\n    /**\n     * using in toolbar menu\n     * @param event json\n     */\n    menuItemClick(event) {\n      this.onMenuItemClick.next(event);\n    }\n    /**\n     * using in toolbar menu\n     * @param event json\n     */\n    menuItemExpanded(event) {\n      this.onMenuItemExpanded.next(event);\n    }\n    /**\n     * using in toolbar menu\n     * @param event json\n     */\n    menuItemCollapsed(event) {\n      this.onMenuItemCollapsed.next(event);\n    }\n    /**\n    * using in toolbar menu\n    * @param event json\n    */\n    fabExpanded(event) {\n      this.onFabExpanded.next(event);\n    }\n    /**\n     * using in toolbar menu\n     * @param event json\n     */\n    fabCollapsed(event) {\n      this.onFabCollapsed.next(event);\n    }\n    /**\n     * using in toolbar menu\n     * @param event json\n     */\n    mainFabButtonClick(event) {\n      this.onMainFabButtonClick.next(event);\n    }\n    /**\n     * using in toolbar menu\n     * @param event json\n     */\n    fabButtonClick(event) {\n      this.onFabButtonClick.next(event);\n    }\n    static {\n      this.ɵfac = function NgxMaterialDrawerEventEmitter_Factory(t) {\n        return new (t || NgxMaterialDrawerEventEmitter)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: NgxMaterialDrawerEventEmitter,\n        factory: NgxMaterialDrawerEventEmitter.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NgxMaterialDrawerEventEmitter;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}