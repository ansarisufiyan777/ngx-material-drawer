{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BreakpointObserverService, POINTS_NAME } from '../utils/breakpoint-observer.service';\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\nimport { NgxUtilsService } from '../utils/utils.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utils/breakpoint-observer.service\";\nimport * as i2 from \"../utils/mat-event-emitter.service\";\nimport * as i3 from \"../utils/utils.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/grid-list\";\nimport * as i6 from \"../card-holder/card-holder.component\";\nfunction NgxGridComponent_mat_grid_tile_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-grid-tile\", 3);\n    i0.ɵɵelement(1, \"lib-card-holder\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r1 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"colspan\", card_r1.cols)(\"rowspan\", card_r1.rows);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"cardData\", ctx_r1.ngxUtilsService.getExtendedData(card_r1));\n  }\n}\nexport let NgxGridComponent = /*#__PURE__*/(() => {\n  class NgxGridComponent {\n    constructor(_breakpointObserverService, matEventEmitterService, ngxUtilsService) {\n      this._breakpointObserverService = _breakpointObserverService;\n      this.matEventEmitterService = matEventEmitterService;\n      this.ngxUtilsService = ngxUtilsService;\n      this.onGridDataChange = new EventEmitter();\n      this.matEventEmitterService.onGridDataChange.subscribe(event => {\n        if (event) {\n          this.refreshGrid(event['grids'], this.size);\n        } else if (this.inputData['grid']) {\n          this.gridData = this.inputData.grid;\n        }\n      });\n    }\n    ngOnInit() {\n      if (this.inputData && typeof this.inputData == 'object') {\n        if (this.inputData['grids']) {\n          this.registerBreakPoints(this.inputData['grids']);\n        } else if (this.inputData['grid']) {\n          this.gridData = this.inputData.grid;\n        }\n      }\n      this.ngxUtilsService.componentInstance = this.componentInstance;\n    }\n    registerBreakPoints(grids) {\n      this.size$ = this._breakpointObserverService.size$;\n      this.size$.subscribe(size => {\n        this.size = size;\n        this.refreshGrid(grids, size);\n      });\n    }\n    refreshGrid(grids, size) {\n      if (grids[size] && grids[size]['grid']) {\n        this.gridData = grids[size]['grid'];\n      } else {\n        let gData;\n        let index = POINTS_NAME.indexOf(size);\n        while (!gData && index > 0) {\n          index--;\n          gData = grids[POINTS_NAME[index]] && grids[POINTS_NAME[index]]['grid'];\n        }\n        index = POINTS_NAME.indexOf(size);\n        while (!gData && index < POINTS_NAME.length - 1) {\n          index++;\n          gData = grids[POINTS_NAME[index]] && grids[POINTS_NAME[index]]['grid'];\n        }\n        this.gridData = gData || [];\n      }\n    }\n    static {\n      this.ɵfac = function NgxGridComponent_Factory(t) {\n        return new (t || NgxGridComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserverService), i0.ɵɵdirectiveInject(i2.NgxMaterialDrawerEventEmitter), i0.ɵɵdirectiveInject(i3.NgxUtilsService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: NgxGridComponent,\n        selectors: [[\"ngx-material-grid\"]],\n        inputs: {\n          inputData: [i0.ɵɵInputFlags.None, \"gridData\", \"inputData\"],\n          componentInstance: \"componentInstance\"\n        },\n        outputs: {\n          onGridDataChange: \"onGridDataChange\"\n        },\n        decls: 3,\n        vars: 4,\n        consts: [[1, \"grid-container\"], [3, \"cols\", \"rowHeight\", \"gutterSize\"], [3, \"colspan\", \"rowspan\", 4, \"ngFor\", \"ngForOf\"], [3, \"colspan\", \"rowspan\"], [3, \"cardData\"]],\n        template: function NgxGridComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-grid-list\", 1);\n            i0.ɵɵtemplate(2, NgxGridComponent_mat_grid_tile_2_Template, 2, 3, \"mat-grid-tile\", 2);\n            i0.ɵɵelementEnd()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"cols\", (ctx.gridData == null ? null : ctx.gridData.cols) || (ctx.inputData == null ? null : ctx.inputData.cols) || 4)(\"rowHeight\", (ctx.gridData == null ? null : ctx.gridData.rowHeight) || (ctx.inputData == null ? null : ctx.inputData.rowHeight) || \"200px\")(\"gutterSize\", (ctx.gridData == null ? null : ctx.gridData.gutterSize) || (ctx.inputData == null ? null : ctx.inputData.gutterSize) || \"0px\");\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngForOf\", ctx.gridData);\n          }\n        },\n        dependencies: [i4.NgForOf, i5.MatGridList, i5.MatGridTile, i6.CardHolderComponent]\n      });\n    }\n  }\n  return NgxGridComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}