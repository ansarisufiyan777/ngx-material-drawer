{"ast":null,"code":"import { ElementRef, EventEmitter } from '@angular/core';\nimport { VERSION } from '@angular/material/core';\nimport { NgxNavService } from '../utils/nav.service';\nimport { NgxMaterialDrawerEventEmitter } from '../utils/mat-event-emitter.service';\nimport { NgxUtilsService } from '../utils/utils.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../utils/nav.service\";\nimport * as i2 from \"../utils/mat-event-emitter.service\";\nimport * as i3 from \"../utils/utils.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/list\";\nimport * as i6 from \"@angular/material/sidenav\";\nimport * as i7 from \"@angular/flex-layout/extended\";\nimport * as i8 from \"../nav-list-item/nav-list-item.component\";\nimport * as i9 from \"../top-nav/top-nav.component\";\nimport * as i10 from \"../nav-list-item-mini/nav-list-item-mini.component\";\nimport * as i11 from \"../fab/fab.component\";\nconst _c0 = [\"appDrawer\"];\nconst _c1 = [\"*\"];\nfunction NgxMaterialDrawerComponent_mat_nav_list_4_lib_nav_list_item_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"lib-nav-list-item\", 8);\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"item\", item_r1);\n  }\n}\nfunction NgxMaterialDrawerComponent_mat_nav_list_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-nav-list\");\n    i0.ɵɵtemplate(1, NgxMaterialDrawerComponent_mat_nav_list_4_lib_nav_list_item_1_Template, 1, 1, \"lib-nav-list-item\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.navData == null ? null : ctx_r1.navData.navItems == null ? null : ctx_r1.navData.navItems.data);\n  }\n}\nfunction NgxMaterialDrawerComponent_mat_nav_list_5_lib_nav_list_item_mini_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"lib-nav-list-item-mini\", 8);\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"item\", item_r3);\n  }\n}\nfunction NgxMaterialDrawerComponent_mat_nav_list_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-nav-list\");\n    i0.ɵɵtemplate(1, NgxMaterialDrawerComponent_mat_nav_list_5_lib_nav_list_item_mini_1_Template, 1, 1, \"lib-nav-list-item-mini\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.navData == null ? null : ctx_r1.navData.navItems == null ? null : ctx_r1.navData.navItems.data);\n  }\n}\nexport let NgxMaterialDrawerComponent = /*#__PURE__*/(() => {\n  class NgxMaterialDrawerComponent {\n    constructor(navService, matEventEmitterService, ngxUtilsService) {\n      this.navService = navService;\n      this.matEventEmitterService = matEventEmitterService;\n      this.ngxUtilsService = ngxUtilsService;\n      this.onMatDrawerInit = new EventEmitter();\n      this.onMatDrawerAfterViewInit = new EventEmitter();\n      this.onNavStateChange = new EventEmitter();\n      this.onDataChange = new EventEmitter();\n      this.onSideNavOpen = new EventEmitter();\n      this.onSideNavClosed = new EventEmitter();\n      this.onMinVarientChange = new EventEmitter();\n      this.onSideNavItemClick = new EventEmitter();\n      this.onSideNavItemExpanded = new EventEmitter();\n      this.onSideNavItemCollapsed = new EventEmitter();\n      this.onMenuItemClick = new EventEmitter();\n      this.onSerachValueChange = new EventEmitter();\n      this.onSerachFocusIn = new EventEmitter();\n      this.onSerachFocusOut = new EventEmitter();\n      this.onSerachInputOpen = new EventEmitter();\n      this.onSerachInputClosed = new EventEmitter();\n      this.onFabExpanded = new EventEmitter();\n      this.onFabCollapsed = new EventEmitter();\n      this.onMainFabButtonClick = new EventEmitter();\n      this.onFabButtonClick = new EventEmitter();\n      //Material drawer version\n      this.version = VERSION;\n      this.subscribeToEventEmitter();\n    }\n    ngOnInit() {\n      this.ngxUtilsService.componentInstance = this.componentInstance;\n      this.matEventEmitterService.dataChange(this.navData);\n      this.matEventEmitterService.onDataChange.subscribe(res => {\n        this.navData = res;\n        this.navService.isMiniVarient = this.navData['miniVarient'];\n        this.navService.isOpened = this.navData['opened'];\n      });\n      this.matEventEmitterService.matDrawerInit(this.navData);\n    }\n    ngAfterViewInit() {\n      this.navService.appDrawer = this.appDrawer;\n      this.matEventEmitterService.matDrawerAfterViewInit(this.navData);\n    }\n    subscribeToEventEmitter() {\n      this.matEventEmitterService.onMatDrawerInit.subscribe(event => {\n        this.onMatDrawerInit.emit(event);\n      });\n      this.matEventEmitterService.onMatDrawerAfterViewInit.subscribe(event => {\n        this.onMatDrawerAfterViewInit.emit(event);\n      });\n      this.matEventEmitterService.onNavStateChange.subscribe(event => {\n        this.onNavStateChange.emit(event);\n      });\n      this.matEventEmitterService.onDataChange.subscribe(event => {\n        this.onDataChange.emit(event);\n      });\n      this.matEventEmitterService.onSideNavOpen.subscribe(event => {\n        this.onSideNavOpen.emit(event);\n      });\n      this.matEventEmitterService.onSideNavClosed.subscribe(event => {\n        this.onSideNavClosed.emit(event);\n      });\n      this.matEventEmitterService.onMinVarientChange.subscribe(event => {\n        this.onMinVarientChange.emit(event);\n      });\n      this.matEventEmitterService.onSideNavItemClick.subscribe(event => {\n        this.onSideNavItemClick.emit(event);\n      });\n      this.matEventEmitterService.onSideNavItemExpanded.subscribe(event => {\n        this.onSideNavItemExpanded.emit(event);\n      });\n      this.matEventEmitterService.onSideNavItemCollapsed.subscribe(event => {\n        this.onSideNavItemCollapsed.emit(event);\n      });\n      this.matEventEmitterService.onMenuItemClick.subscribe(event => {\n        this.onMenuItemClick.emit(event);\n      });\n      this.matEventEmitterService.onSearchValueChange.subscribe(event => {\n        this.onSerachValueChange.emit(event);\n      });\n      this.matEventEmitterService.onSerachFocusIn.subscribe(event => {\n        this.onSerachFocusIn.emit(event);\n      });\n      this.matEventEmitterService.onSerachFocusOut.subscribe(event => {\n        this.onSerachFocusOut.emit(event);\n      });\n      this.matEventEmitterService.onFabExpanded.subscribe(event => {\n        this.onFabExpanded.emit(event);\n      });\n      this.matEventEmitterService.onFabCollapsed.subscribe(event => {\n        this.onFabCollapsed.emit(event);\n      });\n      this.matEventEmitterService.onMainFabButtonClick.subscribe(event => {\n        this.onMainFabButtonClick.emit(event);\n      });\n      this.matEventEmitterService.onFabButtonClick.subscribe(event => {\n        this.onFabButtonClick.emit(event);\n      });\n      this.matEventEmitterService.onSerachInputOpen.subscribe(event => {\n        this.onSerachInputOpen.emit(event);\n      });\n      this.matEventEmitterService.onSerachInputClosed.subscribe(event => {\n        this.onSerachInputClosed.emit(event);\n      });\n    }\n    static {\n      this.ɵfac = function NgxMaterialDrawerComponent_Factory(t) {\n        return new (t || NgxMaterialDrawerComponent)(i0.ɵɵdirectiveInject(i1.NgxNavService), i0.ɵɵdirectiveInject(i2.NgxMaterialDrawerEventEmitter), i0.ɵɵdirectiveInject(i3.NgxUtilsService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: NgxMaterialDrawerComponent,\n        selectors: [[\"ngx-material-drawer\"]],\n        viewQuery: function NgxMaterialDrawerComponent_Query(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵviewQuery(_c0, 5);\n          }\n          if (rf & 2) {\n            let _t;\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.appDrawer = _t.first);\n          }\n        },\n        inputs: {\n          navData: [i0.ɵɵInputFlags.None, \"data\", \"navData\"],\n          componentInstance: \"componentInstance\"\n        },\n        outputs: {\n          onMatDrawerInit: \"onMatDrawerInit\",\n          onMatDrawerAfterViewInit: \"onMatDrawerAfterViewInit\",\n          onNavStateChange: \"onNavStateChange\",\n          onDataChange: \"onDataChange\",\n          onSideNavOpen: \"onSideNavOpen\",\n          onSideNavClosed: \"onSideNavClosed\",\n          onMinVarientChange: \"onMinVarientChange\",\n          onSideNavItemClick: \"onSideNavItemClick\",\n          onSideNavItemExpanded: \"onSideNavItemExpanded\",\n          onSideNavItemCollapsed: \"onSideNavItemCollapsed\",\n          onMenuItemClick: \"onMenuItemClick\",\n          onSerachValueChange: \"onSerachValueChange\",\n          onSerachFocusIn: \"onSerachFocusIn\",\n          onSerachFocusOut: \"onSerachFocusOut\",\n          onSerachInputOpen: \"onSerachInputOpen\",\n          onSerachInputClosed: \"onSerachInputClosed\",\n          onFabExpanded: \"onFabExpanded\",\n          onFabCollapsed: \"onFabCollapsed\",\n          onMainFabButtonClick: \"onMainFabButtonClick\",\n          onFabButtonClick: \"onFabButtonClick\"\n        },\n        ngContentSelectors: _c1,\n        decls: 9,\n        vars: 11,\n        consts: [[\"appDrawer\", \"\"], [1, \"fixed-topnav\", 3, \"config\"], [\"autosize\", \"\", 3, \"hasBackdrop\"], [3, \"ngClass\", \"ngStyle\", \"position\", \"mode\", \"opened\"], [4, \"ngIf\"], [3, \"ngClass\"], [3, \"fabData\"], [3, \"item\", 4, \"ngFor\", \"ngForOf\"], [3, \"item\"]],\n        template: function NgxMaterialDrawerComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵprojectionDef();\n            i0.ɵɵelement(0, \"lib-top-nav\", 1);\n            i0.ɵɵelementStart(1, \"mat-sidenav-container\", 2)(2, \"mat-sidenav\", 3, 0);\n            i0.ɵɵtemplate(4, NgxMaterialDrawerComponent_mat_nav_list_4_Template, 2, 1, \"mat-nav-list\", 4)(5, NgxMaterialDrawerComponent_mat_nav_list_5_Template, 2, 1, \"mat-nav-list\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"div\", 5);\n            i0.ɵɵprojection(7);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(8, \"lib-fab\", 6);\n          }\n          if (rf & 2) {\n            i0.ɵɵproperty(\"config\", ctx.navData);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"hasBackdrop\", ctx.navData == null ? null : ctx.navData.hasBackdrop);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngClass\", (ctx.navData == null ? null : ctx.navData.miniVarient) && !(ctx.navService == null ? null : ctx.navService.isOpened) ? \"mini-drawer\" : \"\")(\"ngStyle\", (ctx.navData == null ? null : ctx.navData.navItems == null ? null : ctx.navData.navItems.style) ? ctx.navData == null ? null : ctx.navData.navItems.style : \"\")(\"position\", ctx.navData == null ? null : ctx.navData.position)(\"mode\", ctx.navData == null ? null : ctx.navData.mode)(\"opened\", (ctx.navData == null ? null : ctx.navData.miniVarient) ? \"open\" : ctx.navData == null ? null : ctx.navData.opened);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", !(ctx.navData == null ? null : ctx.navData.miniVarient) || (ctx.navData == null ? null : ctx.navData.miniVarient) && (ctx.navService == null ? null : ctx.navService.isOpened));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (ctx.navData == null ? null : ctx.navData.miniVarient) && !(ctx.navService == null ? null : ctx.navService.isOpened));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngClass\", (ctx.navData == null ? null : ctx.navData.miniVarient) ? \"main-container-on-mini-variant\" : \"\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"fabData\", ctx.navData == null ? null : ctx.navData.fabs);\n          }\n        },\n        dependencies: [i4.NgClass, i4.NgForOf, i4.NgIf, i4.NgStyle, i5.MatNavList, i6.MatSidenav, i6.MatSidenavContainer, i7.DefaultClassDirective, i7.DefaultStyleDirective, i8.NgxNavListItemComponent, i9.NgxTopNavComponent, i10.NgxNavListItemMiniComponent, i11.NgxFabComponent],\n        styles: [\"var[_ngcontent-%COMP%]   resource[_ngcontent-%COMP%]; (()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  {// webpackBootstrap var __webpack_modules__ = ({49: (() => {throw new Error(\\\"Module build failed (from ./node_modules/sass-loader/dist/cjs.js):nCan't find stylesheet to import.n  \\\\2577n6 \\\\2502  @import '~@angular/material/theming';n  \\\\2502          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^n  \\\\2575n  projects/ngx-material-drawer/src/lib/app/scss/styles.scss 6:9                                @importn  projects/ngx-material-drawer/src/lib/app/material-drawer/material-drawer.component.scss 1:9  root stylesheet\\\");})}); // startup // Load entry module and return exports // This entry module doesn\\\"t tell about it\\\"s top-level declarations so it can't be inlined\\nvar __webpack_exports__ = {}; __webpack_modules__[49](); resource = __webpack_exports__;})()[_ngcontent-%COMP%]   ;[_ngcontent-%COMP%]{}\"]\n      });\n    }\n  }\n  return NgxMaterialDrawerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}