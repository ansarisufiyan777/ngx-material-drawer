{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { NgxMaterialDrawerEventEmitter } from './mat-event-emitter.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./mat-event-emitter.service\";\nexport let NgxNavService = /*#__PURE__*/(() => {\n  class NgxNavService {\n    constructor(matEventEmitterService) {\n      this.matEventEmitterService = matEventEmitterService;\n      this.currentUrl = new BehaviorSubject(undefined);\n      this.isDrawerOpened = false;\n    }\n    closeNav() {\n      if (!this.isMiniVarient) {\n        this.appDrawer.close();\n      }\n      this.isOpened = false;\n      this.matEventEmitterService.sideNavClosed(this.getData(this.isOpened));\n    }\n    openNav() {\n      if (!this.isMiniVarient) {\n        this.appDrawer.open();\n      }\n      this.isOpened = true;\n      this.matEventEmitterService.sideNavOpen(this.getData(this.isOpened));\n    }\n    toggleNav() {\n      if (!this.isMiniVarient) {\n        this.appDrawer.toggle();\n      }\n      this.isOpened = !this.isOpened;\n      if (this.isOpened) {\n        this.matEventEmitterService.sideNavOpen(this.getData(this.isOpened));\n      } else {\n        this.matEventEmitterService.sideNavClosed(this.getData(this.isOpened));\n      }\n      this.matEventEmitterService.navStateChange(this.getData(this.isOpened));\n    }\n    getData(b) {\n      return {\n        drawer: this.appDrawer,\n        isOpened: b\n      };\n    }\n    static {\n      this.ɵfac = function NgxNavService_Factory(t) {\n        return new (t || NgxNavService)(i0.ɵɵinject(i1.NgxMaterialDrawerEventEmitter));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: NgxNavService,\n        factory: NgxNavService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return NgxNavService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}