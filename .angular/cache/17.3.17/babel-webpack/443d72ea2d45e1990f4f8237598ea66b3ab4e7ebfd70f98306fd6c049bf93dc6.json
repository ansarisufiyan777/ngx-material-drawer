{"ast":null,"code":"import { EventEmitter, Component, forwardRef, ChangeDetectionStrategy, ViewChild, Input, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport * as editor from 'jsoneditor';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nclass JsonEditorOptions {\n  constructor() {\n    this.enableSort = true;\n    this.enableTransform = true;\n    this.escapeUnicode = false;\n    this.expandAll = false;\n    this.sortObjectKeys = false;\n    this.history = true;\n    this.mode = 'tree';\n    this.search = true;\n    this.indentation = 2;\n  }\n}\nclass JsonEditorComponent {\n  constructor() {\n    this.id = 'angjsoneditor' + Math.floor(Math.random() * 1000000);\n    this.disabled = false;\n    this.isFocused = false;\n    this.optionsChanged = false;\n    this._data = {};\n    this.options = new JsonEditorOptions();\n    this.debug = false;\n    this.change = new EventEmitter();\n    this.jsonChange = new EventEmitter();\n    // Implemented as part of ControlValueAccessor.\n    this.onTouched = () => {};\n    // Implemented as part of ControlValueAccessor.\n    this.onChangeModel = e => {};\n  }\n  set data(value) {\n    this._data = value;\n    if (this.editor) {\n      this.editor.destroy();\n      this.ngOnInit();\n    }\n  }\n  ngOnInit() {\n    let optionsBefore = this.options;\n    if (!this.optionsChanged && this.editor) {\n      optionsBefore = this.editor.options;\n    }\n    if (!this.options.onChangeJSON && this.jsonChange) {\n      this.options.onChangeJSON = this.onChangeJSON.bind(this);\n    }\n    if (!this.options.onChange && this.change) {\n      this.options.onChange = this.onChange.bind(this);\n    }\n    const optionsCopy = Object.assign({}, optionsBefore);\n    // expandAll is an option only supported by ang-jsoneditor and not by the the original jsoneditor.\n    delete optionsCopy.expandAll;\n    if (this.debug) {\n      console.log(optionsCopy, this._data);\n    }\n    if (!this.jsonEditorContainer.nativeElement) {\n      console.error(`Can't find the ElementRef reference for jsoneditor)`);\n    }\n    if (optionsCopy.mode === 'text' || optionsCopy.mode === 'code') {\n      optionsCopy.onChangeJSON = null;\n    }\n    this.editor = new editor(this.jsonEditorContainer.nativeElement, optionsCopy, this._data);\n    if (this.options.expandAll) {\n      this.editor.expandAll();\n    }\n  }\n  ngOnDestroy() {\n    this.destroy();\n  }\n  /**\n   * ngModel\n   * ControlValueAccessor\n   */\n  // ControlValueAccessor implementation\n  writeValue(value) {\n    this.data = value;\n  }\n  // Implemented as part of ControlValueAccessor\n  registerOnChange(fn) {\n    this.onChangeModel = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  onChange(e) {\n    if (this.editor) {\n      try {\n        const json = this.editor.get();\n        this.onChangeModel(json);\n        this.change.emit(json);\n      } catch (e) {\n        if (this.debug) {\n          console.log(e);\n        }\n      }\n    }\n  }\n  onChangeJSON(e) {\n    if (this.editor) {\n      try {\n        this.jsonChange.emit(this.editor.get());\n      } catch (e) {\n        if (this.debug) {\n          console.log(e);\n        }\n      }\n    }\n  }\n  /**\n   * JSON EDITOR FUNCTIONS\n   */\n  collapseAll() {\n    this.editor.collapseAll();\n  }\n  expandAll() {\n    this.editor.expandAll();\n  }\n  focus() {\n    this.editor.focus();\n  }\n  get() {\n    return this.editor.get();\n  }\n  getMode() {\n    return this.editor.getMode();\n  }\n  getName() {\n    return this.editor.getName();\n  }\n  getText() {\n    return this.editor.getText();\n  }\n  set(json) {\n    this.editor.set(json);\n  }\n  setMode(mode) {\n    this.editor.setMode(mode);\n  }\n  setName(name) {\n    this.editor.setName(name);\n  }\n  setSelection(start, end) {\n    this.editor.setSelection(start, end);\n  }\n  getSelection() {\n    return this.editor.getSelection();\n  }\n  getValidateSchema() {\n    return this.editor.validateSchema;\n  }\n  setSchema(schema, schemaRefs) {\n    this.editor.setSchema(schema, schemaRefs);\n  }\n  search(query) {\n    this.editor.search(query);\n  }\n  setOptions(newOptions) {\n    if (this.editor) {\n      this.editor.destroy();\n    }\n    this.optionsChanged = true;\n    this.options = newOptions;\n    this.ngOnInit();\n  }\n  update(json) {\n    this.editor.update(json);\n  }\n  destroy() {\n    this.editor.destroy();\n  }\n  getEditor() {\n    return this.editor;\n  }\n  isValidJson() {\n    try {\n      JSON.parse(this.getText());\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\nclass NgJsonEditorModule {\n  static forRoot() {\n    return {\n      ngModule: NgJsonEditorModule,\n      providers: []\n    };\n  }\n}\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { JsonEditorComponent, JsonEditorOptions, NgJsonEditorModule };\n//# sourceMappingURL=ang-jsoneditor.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}