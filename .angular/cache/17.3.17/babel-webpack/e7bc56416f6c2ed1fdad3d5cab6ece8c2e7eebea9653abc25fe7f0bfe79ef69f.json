{"ast":null,"code":"import { fromEvent } from 'rxjs';\nimport { startWith, map, distinctUntilChanged, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport const POINTS_NAME = ['xl', 'lg', 'md', 'sm', 'xs'];\nconst QUERY = new Map([[POINTS_NAME[0], '(min-width: 1200px)'], [POINTS_NAME[1], '(min-width: 992px)'], [POINTS_NAME[2], '(min-width: 768px)'], [POINTS_NAME[3], '(min-width: 576px)'], [POINTS_NAME[4], '(min-width: 0px)']]);\nexport let BreakpointObserverService = /*#__PURE__*/(() => {\n  class BreakpointObserverService {\n    constructor() {\n      this._size$ = fromEvent(window, 'resize').pipe(startWith(this._getScreenSize()), map(() => this._getScreenSize()), distinctUntilChanged(), shareReplay(1));\n    }\n    get size$() {\n      return this._size$;\n    }\n    _getScreenSize() {\n      const [[newSize = 'never']] = Array.from(QUERY.entries()).filter(([size, mediaQuery]) => window.matchMedia(mediaQuery).matches);\n      return newSize;\n    }\n    static {\n      this.ɵfac = function BreakpointObserverService_Factory(t) {\n        return new (t || BreakpointObserverService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: BreakpointObserverService,\n        factory: BreakpointObserverService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return BreakpointObserverService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}